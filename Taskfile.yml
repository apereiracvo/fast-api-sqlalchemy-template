# https://taskfile.dev/
version: "3"

dotenv: ["dev.env"]

vars:
  PYTHON_VERSION: 3.8
  VENV: pronotez_api
  PYTHON: python3
  ENV: local

tasks:
  venv-create:
    status:
      - "test -f {{.VENV}}/bin/activate"
    cmds:
      - "python3 -m venv {{.VENV}}"
      - ". {{.VENV}}/bin/activate"
      - "python -m pip install --upgrade pip"
      - "pip install poetry"
      - "poetry install"
    preconditions:
      - sh: "which poetry"
        msg: "No poetry found"
      - sh: "which {{.PYTHON}}"
        msg: "No {{.PYTHON}} found"

  venv-activate:
    deps:
      - venv:create
    cmds:
      - ". {{.VENV}}/bin/activate"

  pyenv-create:
    cmds:
      - "pyenv virtualenv {{.PYTHON_VERSION}} {{.VENV}}"

  pyenv-setup:
    cmds:
      - "python -m pip install --upgrade pip"
      - "pip install poetry"
      - "poetry install"

  pyenv-activate:
    cmds:
      - "pyenv activate {{.VENV}}"

  pyenv-remove:
    cmds:
      - "pyenv virtualenv-delete {{.VENV}}"

  docker-build:
    desc: "Build docker containers for the configured environment  type (test, prod, local)"
    cmds:
      - "docker compose -f ./configs/docker/docker-compose-{{.ENV}}.yml build {{.CLI_ARGS}}"

  docker-up:
    desc: "Start full app in docker"
    cmds:
      - "docker-compose -f ./configs/docker/docker-compose-{{.ENV}}.yml up -d"

  docker-db-up:
    desc: "Start DB containers only"
    cmds:
      - "docker-compose -f ./configs/docker/docker-compose-{{.ENV}}.yml up -d db"

  docker-stop:
    desc: "Stop all containers"
    cmds:
      - "docker-compose -f ./configs/docker/docker-compose-{{.ENV}}.yml stop"

  docker-down:
    desc: "Down all containers"
    cmds:
      - "docker-compose -f ./configs/docker/docker-compose-{{.ENV}}.yml down --remove-orphans"

  docker-restart:
    desc: "Restart all containers"
    cmds:
      - "docker-compose -f ./configs/docker/docker-compose-{{.ENV}}.yml restart"

  isort-format:
#    deps:
#      - venv:activate
    cmds:
      - "poetry run isort ."

  isort-check:
#    deps:
#      - venv:activate
    cmds:
      - "poetry run isort --check --diff ."

  black-format:
#    deps:
#      - venv:activate
    cmds:
      - "poetry run black ."

  black-check:
#    deps:
#      - venv:activate
    cmds:
      - "poetry run black --check ."

  mypy:
#    deps:
#      - venv:activate
    cmds:
      - "poetry run mypy ."

  pylint:
#    deps:
#      - venv:activate
    cmds:
      - "poetry run pylint app"

  pytest-docker:
    desc: "run pytest in docker (pass args after '--')"
    cmds:
      - "docker-compose run app ./docker-entrypoint.sh pytest {{.CLI_ARGS}}"

  pytest:
    desc: "run pytest locally (pass args after '--')"
    deps:
      - docker-db-up
    cmds:
      - alembic downgrade base
      - alembic upgrade head
      - poetry run pytest -s -vv -x tests/ --cov=app {{.CLI_ARGS}}
    env:
      DB_HOST: "localhost"
      TZ: "UTC"

  migration:
    desc: "create alembic migration (pass args after '--')"
    deps:
      - docker-db-up
    cmds:
      - "alembic revision --autogenerate {{.CLI_ARGS}}"
    env:
      DB_HOST: "localhost"
      TZ: "UTC"

  upgrade:
    desc: "apply all alembic migration"
    deps:
      - docker-db-up
    cmds:
    - "alembic upgrade head"
    env:
      DB_HOST: "localhost"
      TZ: "UTC"

  downgrade:
    desc: "rollback all alembic migrations"
    deps:
      - docker-db-up
    cmds:
    - "alembic downgrade base"
    env:
      DB_HOST: "localhost"
      TZ: "UTC"

  run:
    desc: "Run app locally"
    deps:
      - docker-db-up
    cmds:
      - ./docker-entrypoint.sh api
    env:
      DB_HOST: "localhost"
      TZ: "UTC"

  # groups
  format:
    desc: "run code formatters"
    cmds:
      - task: isort-format
      - task: black-format

  lint:
    desc: "run linters"
    cmds:
      - task: isort-check
      - task: black-check
      - task: pylint
      - task: mypy
